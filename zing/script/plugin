#!/usr/bin/env php
<?php
require_once dirname(__FILE__) . '/boot_console.php';
use zing\Console as C;

array_shift($_SERVER['argv']);

$action = empty($_SERVER['argv']) ? null : array_shift($_SERVER['argv']);

switch ($action) {
    
    case 'list':
    
        $manager = \zing\plugin\Manager::instance();
        
        $max_id = 0;
        $mav_ver = 0;
        foreach ($manager->stubs() as $stub) {
            $max_id = max($max_id, strlen($stub->id()));
            $max_ver = max($max_ver, strlen($stub->version()));
        }
        
        foreach ($manager->stubs() as $stub) {
            echo str_pad($stub->id(), $max_id + 2);
            echo str_pad($stub->version(), $max_ver + 2);
            echo $stub->title() . "\n";
        }
        
        break;

	case 'info':
	
		if (empty($_SERVER['argv'])) {
			C::write("Usage: script/plugin info plugin_id");
			exit(1);
		}
		
		try {
			$manager = \zing\plugin\Manager::instance();
			$plugin_id = array_shift($_SERVER['argv']);
			$plugin = $manager->plugin($plugin_id);
			
			C::write("Plugin ID: " . $plugin->id());
			C::write("Name: " . $plugin->title());
			C::write("Version: " . $plugin->version());
			C::write("Primary class: " . get_class($plugin));
			
			$extra_fields = array(
				'copyright'		=> 'Copyright',
				'url'			=> 'URL',
				'email'			=> 'Email'
			);
			
			foreach ($extra_fields as $field => $label) {
				if ($value = $plugin->$field()) {
					C::write($label . ': ' . $value);
				}
			}
			
			C::write("Authors:");
			$authors = $plugin->authors();
			if (empty($authors)) {
				C::write("  (unknown)");
			} else {
				foreach ($authors as $author) {
					$author_line  = "  ";
					$author_line .= isset($author['name']) ? $author['name'] : '(unknown)';
					
					$author_contact = array();
					if (isset($author['email'])) $author_contact[] = $author['email'];
					if (isset($author['twitter'])) $author_contact[] = $author['twitter'];
					
					if (count($author_contact)) {
						$author_line .= ' (' . implode(', ', $author_contact) . ')';
					}
					
					C::write($author_line);
				}
			}
			
			$deps = $plugin->dependencies();
			if (count($deps)) {
				C::write("Dependencies:");
				foreach ($deps as $dep) {
					C::write("  " . $dep->toString());
				}
			}
			
		} catch (\zing\plugin\PluginNotFoundException $pnfe) {
			C::write("Plugin not found: $plugin_id");
			exit(1);
		}
		
		break;
    
    case 'install':

		$source = 'zing';
		if (count($_SERVER['argv']) >= 2) {
			$source = array_shift($_SERVER['argv']);
		}
		
		if (empty($_SERVER['argv'])) {
			C::write("Usage: script/plugin install [source] plugin_ref");
			C::write("Supported sources: " . implode(', ', \zing\plugin\Installer::source_ids()));
			exit(1);
		} else {
			$plugin = array_shift($_SERVER['argv']);
		}
        
        $manager    = \zing\plugin\Manager::instance();
        $reporter   = new \zing\reporter\ConsoleReporter;
        $installer  = new \zing\plugin\Installer($manager, $reporter);
        $installer->install($source, $plugin);
        
        exit($installer->success() ? 0 : 1);
 
        break;
    
    default:
  		
		C::write("Usage: script/plugin [list|info|install]");
        exit(1);
}
?>